All of the code and diagrams from this course can be found in this repo: https://github.com/StephenGrider/EthereumCasts

'Smart Contracts' is an entity that can send and receive currency, beyond just humans.

In case you're interested, here are links to the original Bitcoin and Ethereum White Papers.

Bitcoin: A Peer-to-Peer Electronic Cash System (https://bitcoin.org/bitcoin.pdf)
Ethereum: The Ultimate Smart Contract and Decentralized Application Platform (http://web.archive.org/web/20131228111141/http://vbuterin.com/ethereum.html)

---Metamask Setup---

Restore info:
    organ rural senior morning party educate round vapor gossip rain long limb

---Ethereum Accounts---

Composed of Account Address, Public Key, and Private Key.
All values stores as hex. The private key value is super enormous.
IF someone steals your private key then they can get your funds, but highly unlikely since it's so big.
You cannot access funds to an account without its private key.
One Ethereum account can interact across many different Ethereum networks.

---Receiving Ether---(Sending and receiving Ether coins.)

rinkeby-faucet.com is a webpage built by Stephen for testing.
It will send you a tiny amount of Ether coins(.001) by entering your account.

---Why'd We Wait---

A single node has an entire copy of the blockchain.
Let's leave it for now that a blockchain is essentially a database.
Mining is what takes so long to complete the transaction.
Your transaction along with other people's transaction is put into a "Block" that has validation logic ran against it.

---Basic Blockchains---

MUST WATCH TO UNDERSTAND BLOCKCHAINS.

---Block Time--

Hashes are 64 characters long.
Basically Block Time is the time it takes to calculate the hash for a block chain.
It can ben variable from block to block along the change since nodes come in and out of the network.
YOu can check Block Time over time here --> https://etherscan.io/chart/blocktime

---Smart Contracts---

Only live on one network at a time.
A contract's souce code is pretty much a class and you make instances of that class.

---Our First Contract---

Ethereum is an open-source, public, blockchain-based distributed computing platform featuring smart contract functionality.

remix.ethereum.org.

---Contrat Structure---

    pragma solidity ^0.4.17;

    contract Inbox{
        string public message;
        
        function Inbox(string initialMessage) public {
            message = initialMessage;
        }
        
        function setMessage(string newMessage) public {
            message = newMessage;
        }
        
        function getMessage() public view returns (string) {
            return message;
        }
    }

---Function Declarations---

Syntax(see Diagram)
    function getMessage() public view returns (string)

    See diagram to understad 'public' and 'view'. Sometimes just 'public' is used.
    'public' nor 'privat'e indicate any sign of security it just specifies who can call function.
    A good example of 'private' is only being able to call a function from inside another function.
    In general we'll use 'public' but can make a helper function as 'private'.

    'view' and 'constant' are equivalent... constant is the older solidity term not used anymore.
    'returns' is only used with 'view'/'constant'.
    You cannot return data from a function that modifies a contract so this will NOT work.

        function setMessage(string newMessage) public returns (string) {
            message = newMessage;
            returns message;
        }

---Testing with Remix---