All of the code and diagrams from this course can be found in this repo: https://github.com/StephenGrider/EthereumCasts

'Smart Contracts' is an entity that can send and receive currency, beyond just humans.

In case you're interested, here are links to the original Bitcoin and Ethereum White Papers.

Bitcoin: A Peer-to-Peer Electronic Cash System (https://bitcoin.org/bitcoin.pdf)
Ethereum: The Ultimate Smart Contract and Decentralized Application Platform (http://web.archive.org/web/20131228111141/http://vbuterin.com/ethereum.html)

---Metamask Setup---

Restore info:
    organ rural senior morning party educate round vapor gossip rain long limb

---Ethereum Accounts---

Composed of Account Address, Public Key, and Private Key.
All values stores as hex. The private key value is super enormous.
IF someone steals your private key then they can get your funds, but highly unlikely since it's so big.
You cannot access funds to an account without its private key.
One Ethereum account can interact across many different Ethereum networks.

---Receiving Ether---(Sending and receiving Ether coins.)

rinkeby-faucet.com is a webpage built by Stephen for testing.
It will send you a tiny amount of Ether coins(.001) by entering your account.

---Why'd We Wait---

A single node has an entire copy of the blockchain.
Let's leave it for now that a blockchain is essentially a database.
Mining is what takes so long to complete the transaction.
Your transaction along with other people's transaction is put into a "Block" that has validation logic ran against it.

---Basic Blockchains---

MUST WATCH TO UNDERSTAND BLOCKCHAINS.

---Block Time--

Hashes are 64 characters long.
Basically Block Time is the time it takes to calculate the hash for a block chain.
It can ben variable from block to block along the change since nodes come in and out of the network.
YOu can check Block Time over time here --> https://etherscan.io/chart/blocktime

---Smart Contracts---

Only live on one network at a time.
A contract's souce code is pretty much a class and you make instances of that class.

---Our First Contract---

Ethereum is an open-source, public, blockchain-based distributed computing platform featuring smart contract functionality.
LINK: *****remix.ethereum.org****

---Contrat Structure---

    pragma solidity ^0.4.17;

    contract Inbox{
        string public message; // 'message' RETRIEVES a value.
        
        function Inbox(string initialMessage) public { // Constructor function since it shares name of contract(aka Class).
            message = initialMessage;
        }
        
        function setMessage(string newMessage) public { // UPDATES a value AKA creates a transaction. Also returns transaction hash/id.
            message = newMessage;
        }
        
        function getMessage() public view returns (string) {
            return message;
        }
    }

---Function Declarations---

Syntax(see Diagram)
    function getMessage() public view returns (string)

    See diagram to understad 'public' and 'view'. Sometimes just 'public' is used.
    'public' nor 'privat'e indicate any sign of security it just specifies who can call function.
    A good example of 'private' is only being able to call a function from inside another function.
    In general we'll use 'public' but can make a helper function as 'private'.

    'view' and 'constant' are equivalent... constant is the older solidity term not used anymore.
    'returns' is only used with 'view'/'constant'.
    You cannot return data from a function that modifies a contract so this will NOT work.

        function setMessage(string newMessage) public returns (string) {
            message = newMessage;
            returns message;
        }

---Testing with Remix---

In 'Run' tab in Environment field select 'JavaScript VM'.

---Redeploying Contracts---
---Behind the Scenes of Deployment---

SEE DIAGRAM
If we send a transaction into the Ethereum network and leave the 'to' field empty then that means 
we are going to attempt to create a new contract. Data in the 'Data' field is exposed for the world to see.

---More on Running Functions Than You Want to Know---

To change any data on the blockchain we have to submit a transaction.
SEE DIAGRAM.
We also have to wait for it to be mined(go thru that proof of work algorithm), which can take 10-30 seconds to be approved.
When we want to modify any data stored in our contract you do not want to be calling function anymore. 
In solidity terms calling a function is the same as RETRIEVING values.
UPDATING values creates a transaction. See section "Contrat Structure".

Public networks(Main, Ropsten, Kovan, Rinkeby) have longer Block Time(time to complete transaction).\
Simulated local network shown in this video Block Time is instant.

---Wei vs Ether--

Sending a transaction to function costs Ether!
Wei is a unit of measurement.
    1 Ether = 1,000,000,000,000,000,000 Wei
A value of Wei cannot be fractional(decimal). It must be a whole number.
Google wei converter --> etherconverter.online

---Gas and Transactions--

Gas system measures how much work we are executing with code.
Just like you have to pay someone like AWS or other provider it costs money to have someone run your code.
Same is true for Ethereum network. Gas is the price you pay for sending a transaction onto to Ethereum network.

Whenever we issue a transaction that is meant to modify the blockchain with lines of code we must supply
these two properties.
    gasPrice: Amount of Wei the sender is willing to pay per unit gas to get this transaction processed.
    startGas/gasLimit: Total number of units of gas we are willing to spend with this transaction.

Calculation:   
    Willing to pay 300 unit per gas(aka gasPrice) and have used 14 gas.
    Total COST = 300 wei/gas * 14 gas = 4,200 wei

Quickly imagine that there are many types of apps out there you might want to build and can start to get too
expensive. Remember the one who creates the transaction is the one who has to pay the gas price.

---Mnemonic Phrases---

One Mnemonic allows you to remember the Address key, Public key, and Private key for multiple Accounts.
It's a 12-word Mnemonic. 
When you add a new Account you have to reinstall Metamask to generate new Mnemonic, which is easy in Chrome.
Hopefully this refresh feature will be added in the future.

shell canyon govern push oblige small record jewel float bundle approve alert

YOu can convert to keys at 
LINK: *****iancoleman.io/bip39*****

---Getting More Ether---

LINK: *****faucet.rinkeby.io*****
https://www.facebook.com/jairo.hernandez.334/posts/10209368732169893

---Smart Contracts with Solidity--------------------------
---Contract Deployment---

SEE DIAGRAMS.
How do we get out bytecode over to the nework we want to deploy to??
    ANSWER: Tool called Truffle, which is a one-stop shop for Ethereum contracts.

Truffl is still going under rapid dev so something work well and some things not at all.
Stuff breaks say after an upgrade. This is true of all Ethereum tech.
This is why we are instead first going to put a custom node project from scratch.